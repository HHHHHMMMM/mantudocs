{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{422:function(e,t,v){\"use strict\";v.r(t);var o=v(31),a=Object(o.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[v(\"h1\",{attrs:{id:\"vue的生命周期\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#vue的生命周期\"}},[e._v(\"#\")]),e._v(\" vue的生命周期\")]),e._v(\" \"),v(\"p\",[e._v(\"什么是vue中的生命周期？\")]),e._v(\" \"),v(\"p\",[e._v(\"简单说就是vue在整个工作过程中，某些特殊时间点单独调用的某些函数。这些函数就被称为生命周期。\")]),e._v(\" \"),v(\"p\",[e._v(\"所谓，“关键时间点干的一些关键的事”。\")]),e._v(\" \"),v(\"p\",[e._v(\"生命周期又称回调函数、生命周期函数、生命周期钩子，是Vue在关键时刻帮我们调用的一些特殊名称的函数。生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的。\"),v(\"strong\",[e._v(\"生命周期函数中的this指向是vm 或 组件实例对象，所以对于钩子函数，不要写成箭头函数，要写成普通函数！\")])]),e._v(\" \"),v(\"p\",[e._v(\"附上官网解释,实际上就是上面说的例子：\")]),e._v(\" \"),v(\"blockquote\",[v(\"p\",[e._v(\"每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做\"),v(\"strong\",[e._v(\"生命周期钩子\")]),e._v(\"的函数，这给了用户在不同阶段添加自己的代码的机会。\")])]),e._v(\" \"),v(\"h3\",{attrs:{id:\"vue生命周期图解\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#vue生命周期图解\"}},[e._v(\"#\")]),e._v(\" vue生命周期图解\")]),e._v(\" \"),v(\"p\",[v(\"img\",{attrs:{src:\"/img/hook.png\",alt:\"hook\"}})]),e._v(\" \"),v(\"p\",[e._v(\"把官网的图拿过来做了解释。\")]),e._v(\" \"),v(\"p\",[e._v(\"红色框中的函数，叫做生命周期函数。绿色底色的称为环节，并不是生命周期函数。\")]),e._v(\" \"),v(\"p\",[e._v(\"由上图可以很清晰的看到，生命周期一共有8个（4对），都有自己不同的作用。生命周期总体来说，分为三个部分，\"),v(\"strong\",[e._v(\"初始化部分，更新部分，销毁部分\")]),e._v(\"。\")]),e._v(\" \"),v(\"h4\",{attrs:{id:\"初始化部分\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#初始化部分\"}},[e._v(\"#\")]),e._v(\" 初始化部分\")]),e._v(\" \"),v(\"p\",[v(\"code\",[e._v(\"beforeCreate:\")]),e._v(\"由于此时只是刚刚初始化了生命周期，数据代理还未开始，此时\"),v(\"strong\",[e._v(\"无法\")]),e._v(\" 通过vm访问到data和method中的任何东西。\")]),e._v(\" \"),v(\"p\",[v(\"code\",[e._v(\"create\")]),e._v(\":到这一步时，其数据监测，数据代理已经更新完毕，可以访问到vm中的data和method数据。\")]),e._v(\" \"),v(\"p\",[v(\"code\",[e._v(\"beforemount:\")]),e._v(\"到这一步，实际上vue已经解析好了模板，并生成了一份\"),v(\"strong\",[e._v(\"虚拟dom\")]),e._v(\"存在内存中，但并没有来得及往页面上放。故如果单看这个钩子函数，页面展现的都是解析模板前的效果（虚拟dom没有生成真实dom），而在下一步\"),v(\"code\",[e._v(\"mounted\")]),e._v(\"前就把内存中虚拟dom生成了真实dom放到了页面上。由此可见在此函数中手动修改dom。\"),v(\"strong\",[e._v(\"最终\")]),e._v(\"都不会见效。什么意思呢？就是说，在beforemount函数中，手动操作了dom，但马上vue就把前面内存中生成的虚拟dom放到了页面上，更新掉了你的修改。所以在beforemount中，任何手动修改dom的操作都是没有意义的。\")]),e._v(\" \"),v(\"p\",[v(\"code\",[e._v(\"mounted:\")]),e._v('在此阶段，vue完成了其初始化的全过程。此时页面上呈现到的是完全解析后的模板。在此阶段，对dom的其他手动操作均有效（但应避免使用vue时仍然手动操作dom），此阶段一般可以进行开启定时器，发送网络请求，订阅消息，绑定自定义事件等等页面一加载上来的初始化操作。需注意的是，在mounted操作之前，绿色框框还有个操作，叫“create vm.$el and replace \"el\" with it”，什么意思呢？就是把内存中虚拟dom，除了渲染生成真实dom放到页面，vm本身自己也还存了一份真实dom。为什么要存着一份呢？就是为了后面的更新流程。前面说过，vue的更新流程其中有一步就是对比新旧虚拟dom，万一有节点可以复用，不保存这一份真实dom，还如何复用？')]),e._v(\" \"),v(\"h4\",{attrs:{id:\"更新部分\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#更新部分\"}},[e._v(\"#\")]),e._v(\" 更新部分\")]),e._v(\" \"),v(\"p\",[v(\"code\",[e._v(\"beforeUpdate:\")]),e._v(\"：当data中的数据被修改时，会调用这个钩子函数。此时data中数据是新的，但页面还没有来得及重新渲染挂载，所以data数据是新的，但页面上的数据是旧的。\")]),e._v(\" \"),v(\"p\",[v(\"code\",[e._v(\"updated:\")]),e._v(\"此时data数据和页面均是新的，因为在updated和beforeUpdate函数中间，vue做了“Virtual Dom re-render and patch”动作，即：虚拟dom重渲染和比较工作。\")]),e._v(\" \"),v(\"h4\",{attrs:{id:\"销毁部分\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#销毁部分\"}},[e._v(\"#\")]),e._v(\" 销毁部分\")]),e._v(\" \"),v(\"p\",[v(\"code\",[e._v(\"beforedestroy:\")]),e._v(\"此时vm中所有data，method，均处于可用状态，马上要执行销毁过程。此时会做关闭定时器，取消订阅消息，解绑自定义事件等各类收尾工作。\")]),e._v(\" \"),v(\"p\",[v(\"code\",[e._v(\"destroyed:\")]),e._v(\"完全销毁一个实例。清理它与其它实例的连接，解绑它的全部指令及自定义事件监听器。即，使用这个方法之后，所有vm相关的实例内容，全部会被解绑，vue实例上所有内容均不再奏效。但已解析好的内容，不会被销毁，即，销毁后自定义事件会失效，但原生DOM事件依然有效。什么意思呢？比如一个点击事件，会将data中的n+1并显示在页面上，在点击了5次以后，页面上n的位置显示5，然后调用destroy方法，再点击按钮+1时，已经无法+1，但页面上的5依旧是5，不会被连带销毁掉，不会变成\"+e._s(e.n)+\"。一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了。\")]),e._v(\" \"),v(\"div\",{staticClass:\"custom-block tip\"},[v(\"p\",{staticClass:\"custom-block-title\"},[e._v(\"TIP\")]),e._v(\" \"),v(\"p\",[e._v(\"总结生命周期：\")]),e._v(\" \"),v(\"p\",[e._v(\"vue的生命周期一共有8个，4对，分别对应了数据检测、数据代理初始化（beforeCreate,created），vm创建过程（beforeMount,mounted），vm更新过程（beforeUpdate,Updated），vm销毁过程（beforeDestory,Destoryed）。要注意的是，beforeCreate和created并不是vm的创建，而是一些初始化过程的创建。vm真正创建过程在第二阶段，mount阶段，这个阶段无比重要，一般在开发中，一上来干的事，都会放\"),v(\"code\",[e._v(\"mounted\")]),e._v(\"钩子函数中。另外一个很重要的钩子函数是\"),v(\"code\",[e._v(\"beforeDestory\")]),e._v(\",一般在此阶段会把mounted钩子函数中开启的定时器、订阅消息什么的都停止、解绑。\")])])])}),[],!1,null,null,null);t.default=a.exports}}]);","extractedComments":[]}